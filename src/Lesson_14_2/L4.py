""" 4. Режимы доступа """

""" Алгоритм выбора уровня доступа к аргументу

1.Определите, для каких целей будет создан атрибут: для публичного доступа к нему, для использования внутри класса и 
его наследников, только для использования внутри класса.

2.Если атрибут будет использоваться для публичного доступа к нему, то есть необходима возможность у объекта на ходу 
менять значения и получать их, то создавайте публичный атрибут.

3.Если атрибут будет использоваться для работы внутри класса и его наследников, то вам пригодится защищенный атрибут.

4.Если атрибут будет использоваться только для работы внутри класса, то в таком случае необходимо создавать 
приватный атрибут.
"""







""" Задача
Сделать атрибуты класса недоступными извне

1. Добавить режим protected (_) к атрибутам класса
2. Убедиться в доступности атрибутов извне
3. Добавить режимы private (__) к атрибутам класса
4. Убедиться в НЕдоступности атрибутов извне
"""



class Employee:
    raise_amt = 1.04

    def __init__(self, first, last, pay):
        # __init__ - создан для заполнения(инициализирования) атрибутов при создании нового объекта
        self.__first = first
        self.__last = last
        self.pay = pay
        self._email = first + "." + last + "@email.com"

    """Нам надо защитить переменную email или дать рекомендацию что бы данный адрес не менялся пользователем из вне,
    для этого мы можем обернуть переменую в режим protected (_)
    
    
    В случае first и last у нас выведется ошибка, так как переменным применяется режимы private (__), что закрывает 
    доступ для пользователи и при выполнении кода компилятор выдаст ошибку 
    AttributeError: 'Employee' object has no attribute 'first'
    
    
    для доступа к этим переменным мы задаем отдельную функцию c доступом для них
    и таким образом мы можем только инициализировать наш объект (__init__) и получать наш объект (fullname),
    но не менять имя и фамилию
    """

    def fullname(self):
        return f"{self.__first} {self.__last}"







emp_1 = Employee("Ivan", "Ivanov", 50000)

# print(emp_1.__first)
# print(emp_1.__last)
print(emp_1.fullname())     # и данным методом мы можем вывести две закрытые переменные
print(emp_1.pay)

print(emp_1._email)             # Ivan.Ivanov@email.com

emp_1._email = "test@mail.com"  # пробуем менять нашу почту (мы можем поменять наш атрибут, но мы не должны давать пользователю делать это)
print(emp_1._email)             # test@mail.com
