"""============================================== Задача 1=========================================================
Напишите декоратор, который проверяет, что все числа, возвращаемые декорируемой функцией,
являются целыми, и округляет их до целых, если это не так. Декоратор должен принимать параметр precision,
 который указывает, до скольких цифр после запятой округлять числа.
"""
from functools import wraps


def check_floats(precision):
    def wrapper(func):
        @wraps(func)
        def inner(*args, **kwargs):

            result = func(*args, **kwargs)
            # проверка на тип с использованием Type
            if type(result) == float:
                return round(result, precision)
            elif type(result) in (list, tuple):
                rounded = [round(x, precision) if type(x) == float else x for x in result]
                return type(result)(rounded)
            else:
                return result
        return inner
    return wrapper



"""============================================== Задача 2 =========================================================
Напишите декоратор, который повторно вызывает декорируемую функцию заданное количество раз через заданное время,
если произошла ошибка. Параметры, передаваемые в декоратор, обязательно должны быть именованными.
"""





"""============================================== Задача 3 =========================================================
Напишите декоратор, который берет результат декорируемой функции (текст) и возвращает текст, в котором 
каждое слово сокращено до определенной длины. Если слово было сокращено, в конце слова ставится переданный символ. 
Количество символов в слове и знак в конце сокращенного слова — параметры декоратора, причем символ обязательно 
должен передаваться как именованный аргумент.
"""






"""============================================== Задача 4 =========================================================
Напишите тесты с использованием библиотеки pytest для проверки корректности работы декоратора из задачи 3.
"""