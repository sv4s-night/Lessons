import pandas as pd

"""4. Индексирование, выбор и присваивание"""

# столбцы таблицы можно получать 2я способами
# wine_reviews.country        # обращение через точку
# wine_reviews["country"]     # через [] скобки и имя столбца в виде строки


# ================================================================================================================
# Индексация через iloc (по числам) и loc (по именам или меткам)

# iloc - по числам
# dataframe.iloc[1]         - первая строка
# dataframe.iloc[:,3]       - 3й столбец
# dataframe.iloc[:3, 0]     - первые 3 строки первого столбца
# dataframe.iloc[1:3, 0]    - Вторая и третья строка первого столбца
# dataframe.iloc[[0,1,2],0] - Первые 3 строки первого столбца
# dataframe.iloc[-5:]       - последние 5 строк датафрейма
# dataframe.iloc[:]         - выбор всех строк

# loc - по именам или меткам
# dataframe.loc[0, "country"]                       - значение первой строки в столбце Страна
# dataframe.loc[:, "country"]                       - Все значения в столбце Страна
# dataframe.loc[:, ["country"."points","price"]]    - Все значения в указанных столбцах


# ================================================================================================================
# Метод set_index() - позволяет управл индексами и назначения одного или неск столбцов в качестве индекса

# df.set_index(keys, drop=True, append=False,inplace=False,verify_integrity=False)

# keys                    - строки или список строк(имена столбцов) которые будут назначены индексами
# drop=True               - указывает, следует ли удалять исп для индекса столбец из датафрайм
# append=False            - нужно ли добавлять новый индекс к сеществ многомерному индексу
# inplace=False           - следует ли производить операцию на месте, не создавая новый датафрейм
# verify_integrity=False  - Если True, проверяет что новый индекс не содержит дубликатов
# ====================================================
# Пример

data = {
    "student_id": ["001", "002", "003"],
    "name": ["Alice", "Bob", "Charil"],
    "grade": [87, 92, 77]
}

df = pd.DataFrame(data)

# Установить student_id в качестве индекса
df.set_index("student_id", inplace=True)

# Легкий доступ к данным конкретного студента (Charil)
print(f"==========================\n{df.loc["003"]}\n==========================\n")

# ================================================================================================================
""" Задача
Установить данные колонки title в качестве индекса датафрейма
"""

df = pd.read_excel("../../data/winemag-data-130k-v2.xlsx")

# drop по умолчанию стоит True, а значит будет удаляться столбец title
# inplace по умолчанию стоит False, а значит он сгенерирует новый датафрейм, который мы будем искать (что нам не надо)
df.set_index("title", drop=False, inplace=True)
#print(df.iloc[0])  # просто вывод первой строки

print(f"============================={df.loc["Nicosia 2013 Vulkà Bianco  (Etna)"]}\n=============================")



# ================================================================================================================
# Отбор данных по условию (через сравнение ==, &, |)

# italy_reviews = wine_reviews.loc[reviews.country == "Italy"]      # сгенерируется новый датафрейм italy_reviews
# print(italy_reviews)


# оператор & (и)        выбор страна италия и очков вина больше 90
# italy_reviews = wine_reviews.loc[(reviews.country == "Italy") & (wine_reviews.points >= 90)]
# тогда создастся новый датафрейм с ответами


# оператор | (или)      выбор страна италия или очков вина больше 90
# italy_reviews = wine_reviews.loc[(reviews.country == "Italy")| (wine_reviews.points >= 90)]
