import pandas as pd


"""7. Группировка и сортировка"""

# ================================================================================================================
# ================================================================================================================
# Метод  groupby()  — позволяет сгруппировать данные по одному или нескольким столбцам,
#                     или по результатам какой-либо функции.

# df.groupby(by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True,
           # observed=False, dropna=True)     # squeeze=NoDefault.no_default,

# by=None           - имя столбца или список имен столбцов для группировки, либо функция для группировки
# axis=0            - ось для группировки (по умолчанию axis=0, что означает группировку по строкам)
# level=None        - уровень для группировки, используется для многомерных индексов. Позволяет группировать
#                     данные по определенному уровню индекса, что полезно для сложных многомерных данных с
#                     мультииндексами.

# as_index=True     - определяет, будет ли результирующий объект DataFrame или Series содержать группировочные метки
#                     (уникальные значения или комбинации значений, которые используются для определения групп
#                     при выполнении группировки данных в pandas) как индекс. Если as_index=True,
#                     метки групп будут использоваться в качестве индекса результирующего

# sort=True         - сортирует сгруппированные ключи (по умолчанию True)
# group_keys=True   - добавляет ключи групп в индекс результирующего объекта (по умолчанию True).
# squeeze=NoDefault.no_default  - уменьшает размерность результирующего объема данных.
#                                 Позволяет сжать оси в  DataFrame  или  Series, если группировка приводит к объекту
#                                 с размерностью 1, что может сделать результат более компактным.

# observed=False    - для категориальных данных. Если True, возвращает только группы, которые представлены в данных.
# dropna=True       - если True, группа содержащие NaN-значения, исключают (по умолчанию True)


# 1.Группировка по одному столбцу
# df.groupby("column_name")

# 2.Группировка по нескольким столбцам
# df.groupby(["column1", "column2"])

# 3.Использование агрегирующих функций
# df.groupby("column_name").mean()
# df.groupby(['column1', "column2"])

# 4.Группировка с использованием функции
# df.groupby(lambda x: x // 10 * 10)

"""
Лямбда-функция берет индекс строки x, 
делит его на 10 с целочисленным делением (x // 10), 
затем умножает результат на 10 (* 10). 
Это приводит к округлению индекса до ближайшего меньшего десятка. Например:

Если x = 5, то 5 // 10 * 10 будет 0.
"""

# 5.Пример с несколькими параметрами
# df.groupby(["column1", "column2"], as_index=False, sort=False)


"""Задача
Рассмотрим пример с группировкой данных:
Узнать среднюю цену вина для каждой страны
"""

df = pd.read_excel("../../data/winemag-data-130k-v2.xlsx")      # чтение excel файла

country_df = df.groupby("country")              # делаем группировку по странам
print(f"============\n{country_df.price.mean()}\n===================\n")   # узнаем среднее значение через метод mean()




# ================================================================================================================
# ================================================================================================================
# Сортировка через метод sort_values()

df.sort_values(by="country", axis=0, ascending=True, inplace=False, kind="quicksort",
               na_position='last', ignore_index=False, key=None)

# by="country"          - название одного столбца или список из нескольких названий столбцов, по которым будет выполняться сортировка.
# axis=0                - ось для сортировки
# ascending=True        - сортировка по возрастанию (по умолчанию True);
#                         можно также указать список для задания порядка сортировки для нескольких столбцов.
# inplace=False         - если True, выполняет операцию сортировки «на месте» и возвращает None, меняя исходный DF
# na_position='last'    - позиция для NA/NaN-значений:'first' или 'last'. По умолчанию  'last'
# ignore_index=False    - если True, то после сортировки сбрасывает индексы на дефолтные.
# key=None              - функция, которая будет применена к значениям перед сортировкой.
# kind="quicksort"      - метод сортировки; по умолчанию 'quicksort'. Другие варианты: 'mergesort','heapsort','stable'
                        # 'quicksort' — быстрая сортировка. Обычно используется, когда нужна быстрая сортировка,
                                    # а устойчивость (сохранение относительного порядка равных элементов) не является критичной.
                        # 'mergesort' — сортировка слиянием. Обычно используется, когда нужна устойчивая сортировка,
                                    #   особенно на больших наборах данных.
                        # 'heapsort' — пирамидальная сортировка. Обычно используется, когда важна
                                    #   производительность и минимальное использование памяти, а устойчивость не является важной.
                        # 'stable' — устойчивая сортировка. Обычно используется, когда требуется
                                    #   устойчивая сортировка с хорошей производительностью на большинстве данных.



"""============================= Пример исп метода ========================================"""

# # 1.Сортировка по одному столбцу:
# df.sort_values(by='column_name')
#
# # 2.Сортировка по нескольким столбцам:
# df.sort_values(by=['column1', 'column2'])
#
# # 3.Сортировка по убыванию:
# df.sort_values(by='column_name', ascending=False)
#
# # 4.Сортировка «на месте»:
# df.sort_values(by='column_name', inplace=True)
#
# # 5.Сортировка с использованием определенного метода сортировки:
# df.sort_values(by='column_name', kind='mergesort')
#
# # 6. Сортировка с размещением NaN-значений в начале:
# df.sort_values(by='column_name', na_position='first')
#
# # 7. Сортировка с применением пользовательской функции:
# df.sort_values(by='column_name', key=lambda x: x.str.lower())

""" Задача
Сортировка по цене в порядке возрастания:

"""

df.sort_values(by="price", inplace=True, ascending=False)
print(f"====================\n{df.head().price}\n==========================\n")
# без price df.head().price выведет 5 из 14 колонок




# ================================================================================================================
# ================================================================================================================
""" Одновременная группировка и сортировка данных
 
можно комбинировать функции groupby() и sort_values() для группировки и сортировки данных  
"""

sort_by_price_and_country = df.groupby('country').apply(
    lambda x: x.sort_values("price", ascending=False)
)

print(f"=======================\n{sort_by_price_and_country}\n========================\n")
"""
Группировка — сначала группируем данные по странам.
df.groupby('country')

Сортировка внутри групп — с помощью функции apply применяем сортировку по цене внутри каждой группы.
df.groupby('country').apply(lambda x: x.sort_values('price', ascending=False))
"""




# ================================================================================================================
# ================================================================================================================
""" Фильтрация данных """
# Фильтрация позволяет выбрать строки, которые удовлетворяют определенным условиям.

# Фильтрация вин, чья цена больше 100 долларов
expensive_wines = df[df['price'] > 100]
print(expensive_wines.head())





# ================================================================================================================
# ================================================================================================================
""" Группировка и фильтрация данных """

# Можно комбинировать groupby() с фильтрацией данных.
# Например, чтобы выбрать вина из Италии, которые стоят больше 100 долларов:

# Фильтрация вин из Италии
italian_wines = df[df['country'] == 'Italy']

# Фильтрация дорогих итальянских вин
expensive_italian_wines = italian_wines[italian_wines['price'] > 100]
print(expensive_italian_wines.head())

"""
Фильтрация по стране — сначала выбираем все вина из Италии.
Фильтрация по цене — из отобранных вин выбираем только те, которые стоят больше 100 долларов.
"""



# ================================================================================================================
# ================================================================================================================
""" Группировка и агрегация данных """

"""
Агрегация данных — это процесс обобщения и свертывания данных с целью их анализа, 
упрощения и получения ключевой информации. Этот процесс включает различные операции 
для создания сводных показателей из более детализированных данных.

Метод agg(сокращение от aggregate) — позволяет выполнять несколько 
операций агрегации на различных столбцах DataFrame одновременно.
"""

# Синтаксис:
# DataFrame.agg(func, axis=0, *args, **kwargs)

# Примеры использования метода
# 1. Применение одной функции ко всем столбцам:
df.agg('mean')

# 2. Применение команды на несколько функций ко всем столбцам:
df.agg(['mean', 'sum'])

# 3. Применение функции к конкретным столбцам:
df.agg({'column1': 'mean', 'column2': 'sum'})

# 4. Применение нескольких функций к одному и нескольким столбцам:
df.agg({
    'column1': ['mean', 'sum'],
    'column2': ['min', 'max']
})


"""============================= Пример исп метода ========================================"""
# Рассмотрим пример, в котором сгруппируем данные по странам и вычислим среднюю цену и рейтинг:

# Группировка данных по странам и вычисление средней цены и рейтинга
mean_price_and_rating_by_country = df.groupby('country').agg({'price': 'mean', 'points': 'mean'})
print(mean_price_and_rating_by_country.head())



# ================================================================================================================
# ================================================================================================================
""" Перебор по cтрочкам или cтолбцам """

"""
Метод iterrows() — возвращает итератор, который позволяет проходить по строкам DataFrame. 
Перебор строк — внутри цикла можно использовать .loc или .at для доступа к значениям каждой строки.
"""
# Метод iterrows() — используется для перебора строк в DataFrame

# Перебор строк DataFrame
for index, row in df.iterrows():
    print(f'Index: {index}, Country: {row["country"]}, Price: {row["price"]}')


"""
Метод iteritems() — используется для перебора столбцов в DataFrame

Пояснение к примеру:
 Метод iteritems() — возвращает итератор, который позволяет проходить по столбцам DataFrame
Перебор столбцов — внутри цикла можно использовать .tolist(), 
чтобы преобразовать столбец в список и работать с его значениями.
"""

# Перебор столбцов DataFrame
for column_name, column_data in df.iteritems():
    print(f'Column: {column_name}, Data: {column_data.tolist()}')


# ================================================================================================================
# ================================================================================================================
""" Задача 
Сгруппировать данные по странам и вычислить среднюю цену и рейтинг 
"""

# в агрегацию первым параметром мы передали словарь {}
new_df = df.groupby("country").agg({
    "price": "mean",        # цена: среднее значение
    "points": "mean"        # рейтинг: среднее значение
})

print(new_df.head())
