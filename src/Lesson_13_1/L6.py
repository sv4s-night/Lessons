import pandas as pd

"""6. Статистика по данным и отображения"""

df = pd.read_excel("../../data/winemag-data-130k-v2.xlsx")

# ================================================================================================================
# ================================================================================================================
# Статистика    метод describe()

# среднее значение
# стандартное отклонение
# медиана
# квартили

# статистика по очкам
print(f"===========================\n{df.points.describe()}\n===================================\n")

# статистика по рецензентам
print(f"===========================\n{df.taster_name.describe()}\n===================================\n")

# ================================================================================================================
# ================================================================================================================
# Среднее значение  метод Mean()
print(f"===========================\n{df.points.mean()}\n===================================\n")

# Уникальное значение   метод Unique()
print(f"===========================\n{df.taster_name.unique()}\n===================================\n")

# Количество упоминаний каждого имени   метод Value_counts()
print(f"===========================\n{df.taster_name.value_counts()}\n===================================\n")
# сколько раз упоминается каждый тестер

# ================================================================================================================
# ================================================================================================================


"""Функция MAP() - позволяет применить функцию к каждому элементу списка"""
# Перепишем оценки вина из 100-балльной системы в систему, где среднее значение равно 0

df_mean = df.points.mean()  # среднее значение
df.points.map(lambda p: p - df_mean)  # для каждого пункта мы делаем среднее значение

df['description_length'] = df.description.map(len)  # добавим столбец с длинной описания вина
print(df['description_length'].describe())
# print(df.description_length.describe())   или можно записать так


# ================================================================================================================
# ================================================================================================================
"""Метод Apply()  -  позволяет применять пользовательские функции к каждой строке или столбцу DF"""
# Параметры:
#   func - функция, которую необходимо применить
#   axis - параметр, указывает, применять функцию к строкам(значение 1) или к столбцам (значение 0)

# Создаем DataFrame
df1 = pd.DataFrame({
    "A": [1, 2, 3],
    "B": [4, 5, 6],
    "C": [7, 8, 9]
})

# Исп apply для вычисления средн значения для каждого столбца
result = df1.apply(pd.Series.mean)      # Series - для серии наборов
print(f"===========================\n{result}\n===========================\n")


# суммирует значение по столбцам
result_axes_0 = df1.sum(axis=0)
print(f"===========================\n{result_axes_0}\n===========================\n")

# суммирует значение по строкам
result_axes_1 = df1.sum(axis=1)
print(f"===========================\n{result_axes_1}\n===========================\n")




# ================================================================================================================
# ================================================================================================================
"""Задача
Напишите функцию, которая вычисляет среднее значение оценок из столбца POINTS, 
и примените ее к DataFrame
"""


def calc_avg(points):
    return sum(points) / len(points)


print(df["points"].apply(lambda x: calc_avg([x])))
"""
через apply в lambda x передаем значения points и применяем к каждому значению Ф calc_avg()
Вывод:
    0         87.0
    1         87.0
    2         87.0
          ... 
    129966    90.0
    129967    90.0
"""




# print(f"===========================\n{}\n===========================\n")